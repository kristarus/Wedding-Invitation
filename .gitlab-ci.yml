variables:
  GIT_STRATEGY: none

before_script:
  - 'which ssh-agent || (apt-get update -y && apt-get install openssh-client -y)'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - CI_COMMIT_REF_NAME_SAFE=${CI_COMMIT_REF_NAME//\//-}

stages:
  - build  
  - build_for_stage
  - build_image
  - push_to_stage_registry

build:
  tags:
    - front
  stage: build
  script:
    - rm -rf $CI_PROJECT_NAME
    - git clone --branch $CI_COMMIT_REF_NAME git@git.np2.dev:$CI_PROJECT_PATH.git
    - cd $CI_PROJECT_NAME 
    - mkdir -p build
    - docker build --progress=plain -t $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME_SAFE -f Dockerfile.compile .
    - docker run --name $CI_PROJECT_NAME_$CI_COMMIT_REF_NAME_SAFE $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME_SAFE
    - docker cp $CI_PROJECT_NAME_$CI_COMMIT_REF_NAME_SAFE:/app/build ./
    - docker stop $CI_PROJECT_NAME_$CI_COMMIT_REF_NAME_SAFE
    - docker rm $CI_PROJECT_NAME_$CI_COMMIT_REF_NAME_SAFE
    - docker rmi $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME_SAFE
    - echo "Create api.js"
    - bash ./init-api.sh
    - echo "Created api.js is "
    - cat ./build/api.js
    - echo "Show all files "
    - ls -la
    - echo "Show all filesin build dir "
    - ls -la ./build
    - echo "Start make artifact"
    - rm -f ../$CI_PROJECT_NAME.zip
    - zip -r ../$CI_PROJECT_NAME.zip ./build
  
  environment:
    name: staging  

  artifacts:
    paths:
      - ./$CI_PROJECT_NAME.zip

build_for_stage:
  tags:
    - front
  stage: build_for_stage
  script:
    - rm -rf ./deployment
    - mkdir -p ./deployment    
    - unzip ./$CI_PROJECT_NAME.zip -d ./deployment
    - cd ./deployment
    - echo "Created api.js is "
    - cat ./build/api.js
    - echo "Show all files "
    - ls -la
    - echo "Show all filesin build dir "
    - ls -la ./build    
    - echo "Start deploy to stage1"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - rsync -avz --delete ./build/ root@stage1:/var/www/stage1/$CI_PROJECT_NAME/build/

  environment:
    name: staging
  
  when: manual

#run tasks only on release_x.y.z tags, prepare container image and push it to the registry
build_image:
  stage: build_image
  script:
    - rm -rf $CI_PROJECT_NAME
    - git clone --branch $CI_COMMIT_REF_NAME git@git.np2.dev:$CI_PROJECT_PATH.git
    - cd $CI_PROJECT_NAME 
    - mkdir -p build
    - docker build --progress=plain -t $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME_SAFE -f Dockerfile.compile .
    - docker run --name $CI_PROJECT_NAME_$CI_COMMIT_REF_NAME_SAFE $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME_SAFE
    - docker cp $CI_PROJECT_NAME_$CI_COMMIT_REF_NAME_SAFE:/app/build ./
    - docker stop $CI_PROJECT_NAME_$CI_COMMIT_REF_NAME_SAFE
    - docker rm $CI_PROJECT_NAME_$CI_COMMIT_REF_NAME_SAFE
    - docker rmi $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME_SAFE
    - echo "Create api.js"
    - bash ./init-api.sh
    - echo "Created api.js is "
    - cat ./build/api.js
    - echo "Show all files "
    - ls -la
    - echo "Show all filesin build dir "
    - ls -la ./build
    - echo "Start make arctifact"
    - zip -r ../$CI_PROJECT_NAME.zip ./build
    - echo "Start make docker image"
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
    - echo "Pushing to GitLab Container Registry"
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - SECRET=VT_${CI_PROJECT_NAME^^}_IMAGE_TAG_PLACEHOLDER
    - vt k8s/preprod0 $SECRET $CI_COMMIT_TAG


  tags:
    - front
  rules:
    - if: '$CI_COMMIT_TAG =~ /^release_\d+\.\d+\.\d+$/'
      when: on_success

push_to_stage_registry:
  stage: push_to_stage_registry
  script:  
    - TIMESTAMP=$(date +"%Y%m%d%H%M%S")
    - rm -rf $CI_PROJECT_NAME
    - git clone --branch $CI_COMMIT_REF_NAME git@git.np2.dev:$CI_PROJECT_PATH.git  
    - cd $CI_PROJECT_NAME
    - IMAGE_TAG=$CI_COMMIT_REF_NAME_$TIMESTAMP 
    - docker build -t $CI_REGISTRY_IMAGE:$IMAGE_TAG .
    - echo "Pushing to Stage GitLab Container Registry"    
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - docker rmi $CI_REGISTRY_IMAGE:$IMAGE_TAG    
    - echo $CI_PROJECT_NAME
    - echo $IMAGE_TAG
    - SECRET=VT_${CI_PROJECT_NAME^^}_IMAGE_TAG_PLACEHOLDER
    - vt k8s/stage0 $SECRET $IMAGE_TAG
    - curl -X POST -F token=$K8S_APPS_TRIGGER_VALUE -F ref=main -F "variables[APPLICATION_NAME]=$CI_PROJECT_NAME" -F "variables[IMAGE_TAG]=$IMAGE_TAG" -F "variables[CI_PIPELINE_SOURCE]=trigger" -F "variables[TRIGGER_TYPE]=stage1" https://gitlab.np2.dev/api/v4/projects/32/trigger/pipeline
  tags:
    - front
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success

